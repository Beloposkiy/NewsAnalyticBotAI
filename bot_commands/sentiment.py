import re
import torch
import numpy as np
from transformers import AutoTokenizer, AutoModelForSequenceClassification
from telethon import TelegramClient
from telethon.errors import MessageIdInvalidError
from init_settings.config import api_id, api_hash

# ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Å–µ—Å—Å–∏—é, —á—Ç–æ –∏ reader.py
SESSION_PATH = "sessions/news_monitoring"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ ===
model_name = "cointegrated/rubert-tiny-sentiment-balanced"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name)
labels = ['negative', 'neutral', 'positive']

# === –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ ===
def analyze_sentiment(text: str) -> str:
    try:
        inputs = tokenizer(text, return_tensors="pt", truncation=True, max_length=512)
        with torch.no_grad():
            logits = model(**inputs).logits
        probs = torch.nn.functional.softmax(logits, dim=-1).squeeze().numpy()

        top = int(np.argmax(probs))
        score = probs[top]
        label = labels[top]

        lowered = text.lower()
        if label == "neutral" and score > 0.85 and any(word in lowered for word in ["–ø—Ä–æ–≤–∞–ª", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ"]):
            label = "negative"

        if label == "positive":
            return f"üòä –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è ({score:.2f})"
        elif label == "neutral":
            return f"üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è ({score:.2f})"
        elif label == "negative":
            return f"üò† –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è ({score:.2f})"
        else:
            return f"ü§∑ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Telegram-–ø–æ—Å—Ç–∞ ===
async def extract_text_from_telegram(url: str) -> str:
    match = re.match(r"https?://t\.me/([\w\d_]+)/(\d+)", url)
    if not match:
        return "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram-–ø–æ—Å—Ç."

    channel_username, msg_id = match.groups()
    msg_id = int(msg_id)

    try:
        async with TelegramClient(SESSION_PATH, api_id, api_hash) as client:
            message = await client.get_messages(channel_username, ids=msg_id)
            return message.text.strip() if message and message.text else "[–ü–æ—Å—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω]"
    except MessageIdInvalidError:
        return "[‚õî –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ]"
    except Exception as e:
        return f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram: {e}]"

# === –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Å—Å—ã–ª–∫–µ ===
async def analyze_telegram_post(url: str) -> str:
    text = await extract_text_from_telegram(url)
    if text.startswith("[") or text.startswith("‚ö†Ô∏è"):
        return text
    return analyze_sentiment(text)

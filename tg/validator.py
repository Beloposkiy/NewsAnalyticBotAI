from telethon.tl.functions.messages import GetHistoryRequest
from telethon.errors import ChannelPrivateError, UsernameInvalidError, UsernameNotOccupiedError
from datetime import datetime, timedelta, timezone
import logging

logger = logging.getLogger(__name__)

class Validator:
    def __init__(self, telegram_client):
        self.client = telegram_client

    async def validate_telegram_channels(self, channels: list, limit: int = 100, days: int = 1):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram-–∫–∞–Ω–∞–ª–æ–≤.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ —Å–ø–∏—Å–∫–∞: —Ä–∞–±–æ—á–∏–µ –∫–∞–Ω–∞–ª—ã –∏ –Ω–µ—Ä–∞–±–æ—á–∏–µ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏.
        """
        working = []
        failed = {}
        cutoff_date = datetime.now(timezone.utc) - timedelta(days=days)

        async with self.client:
            for channel in channels:
                try:
                    result = await self.client(GetHistoryRequest(
                        peer=channel,
                        limit=limit,
                        offset_date=None,
                        offset_id=0,
                        max_id=0,
                        min_id=0,
                        add_offset=0,
                        hash=0
                    ))
                    valid_msgs = [
                        msg for msg in result.messages
                        if getattr(msg, "message", None)
                        and msg.date >= cutoff_date
                    ]

                    if valid_msgs:
                        working.append(channel)
                        logger.info(f"‚úÖ TG @{channel}: {len(valid_msgs)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    else:
                        failed[channel] = "–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
                        logger.warning(f"‚ö†Ô∏è TG @{channel}: –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

                except (UsernameInvalidError, UsernameNotOccupiedError):
                    failed[channel] = "–ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    logger.warning(f"‚ùå TG @{channel}: –∫–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                except ChannelPrivateError:
                    failed[channel] = "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
                    logger.warning(f"üîí TG @{channel}: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
                except Exception as e:
                    failed[channel] = str(e)
                    logger.warning(f"‚ùå TG @{channel}: {e}")

        return working, failed

import logging
import warnings
import re
from pathlib import Path

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from init_settings.config import BOT_TOKEN
from bot_commands.topics import extract_topics
from tg.reader import NewsReader
from tg.source import SourceList
from tg.validator import Validator
from bot_commands.pdf_report import generate_pdf
from bot_commands.sentiment import analyze_sentiment, analyze_telegram_post

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

class SentimentStates(StatesGroup):
    waiting_for_text = State()

@dp.message(SentimentStates.waiting_for_text)
async def process_sentiment(message: types.Message, state: FSMContext):
    result = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."

    # üìå –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
    if message.forward_from_chat and message.text:
        result = analyze_sentiment(message.text.strip())

    # üåê –°—Å—ã–ª–∫–∞ –Ω–∞ Telegram-–ø–æ—Å—Ç
    elif message.text and message.text.startswith("http") and "t.me" in message.text:
        result = await analyze_telegram_post(message.text.strip())

    # ‚úçÔ∏è –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    elif message.text:
        result = analyze_sentiment(message.text.strip())

    await message.answer(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n{result}")
    await state.clear()


@dp.message(Command("sentiment"))
async def sentiment_cmd(message: types.Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ .txt-—Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏:")
    await state.set_state(SentimentStates.waiting_for_text)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π /topics, /sentiment –∏–ª–∏ /report –¥–ª—è –Ω–∞—á–∞–ª–∞.")

@dp.message(Command("topics"))
async def topics_cmd(message: types.Message):
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /topics –ø–æ–ª—É—á–µ–Ω–∞. –ë–æ—Ç –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É.")
    msg = await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é Telegram-–∫–∞–Ω–∞–ª—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏...")

    try:
        reader = NewsReader()
        await reader.init()

        sources_obj = SourceList()
        telegram_channels = sources_obj.get_telegram_channels()

        validator = Validator(reader.client)
        working_tg, _ = await validator.validate_telegram_channels(telegram_channels)

        all_news = []
        for channel in working_tg:
            messages = await reader.telegram_reader(channel, limit=30, days=1)
            all_news.extend(messages)

        if not all_news:
            await msg.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏.")
            return

        top_topics = extract_topics(all_news)[:10]
        if not top_topics:
            await msg.edit_text("üòï –¢–µ–º—ã –Ω–µ –±—ã–ª–∏ –≤—ã–¥–µ–ª–µ–Ω—ã.")
            return

        text_lines = []
        for raw in top_topics:
            cleaned = re.sub(r'[^\w\s.,:;!?‚Äì‚Äî()\"\'¬´¬ª‚Ññ@/%\\-]', '', raw)
            lines = cleaned.strip().split("\n")
            if not lines:
                continue
            header = lines[0].lstrip("‚Ä¢").strip()
            header = f"üì∞ {header}"
            link = next((l.strip() for l in lines if "http" in l or "t.me/" in l), None)
            count_line = next((l.strip() for l in lines if "–£–ø–æ–º–∏–Ω–∞–Ω–∏–π" in l), None)
            count_str = "0"
            if count_line:
                match = re.search(r"\d+", count_line)
                if match:
                    count_str = match.group(0)
            entry = f"{header}\nüó£Ô∏è –£–ø–æ–º–∏–Ω–∞–Ω–∏–π: {count_str}"
            if link:
                entry += f"\nüîó {link}"
            entry += "\n‚Å£"
            text_lines.append(entry.strip())

        final_text = "\n\n".join(text_lines).strip()
        await msg.edit_text(final_text, parse_mode="HTML", disable_web_page_preview=False)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ Telegram-–∫–∞–Ω–∞–ª–æ–≤:")
        await msg.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("report"))
async def report_cmd(message: types.Message):
    await message.answer("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–∞ –ø–æ —Ç–µ–º–∞–º...")

    try:
        reader = NewsReader()
        await reader.init()

        sources = SourceList()
        validator = Validator(reader.client)
        working_channels, _ = await validator.validate_telegram_channels(sources.get_telegram_channels())

        all_news = []
        for channel in working_channels:
            messages = await reader.telegram_reader(channel, limit=30, days=1)
            all_news.extend(messages)

        if not all_news:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏.")
            return

        top_topics = extract_topics(all_news)
        if not top_topics:
            await message.answer("üòï –¢–µ–º—ã –Ω–µ –±—ã–ª–∏ –≤—ã–¥–µ–ª–µ–Ω—ã.")
            return

        pdf_path = generate_pdf(topics=top_topics)
        await message.answer_document(FSInputFile(pdf_path), caption="üóÇ –í–∞—à PDF-–æ—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞:")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

@dp.message(F.text & ~F.text.startswith("/"))
async def debug_log(message: types.Message):
    logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_my_commands([
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="topics", description="–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã"),
            BotCommand(command="sentiment", description="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞/—Å—Å—ã–ª–∫–∏/—Ñ–∞–π–ª–∞"),
            BotCommand(command="report", description="–°–æ–∑–¥–∞—Ç—å PDF-–æ—Ç—á—ë—Ç"),
        ])
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
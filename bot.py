import logging
import warnings
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand

from init_settings.config import BOT_TOKEN
from bot_commands.topics import extract_topics
from tg.reader import NewsReader
from tg.source import SourceList
from tg.validator import Validator


warnings.filterwarnings("ignore", category=UserWarning, module="torch")
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π /topics –∏–ª–∏ /report –¥–ª—è –Ω–∞—á–∞–ª–∞.")


@dp.message(Command("sentiment"))
async def sentiment_cmd(message: types.Message):
    await message.answer("‚úâÔ∏è –ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–≤–æ—Å—Ç—å, –∏ —è —Å–∫–∞–∂—É, –∫–∞–∫–∞—è —É –Ω–µ—ë —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å. (–ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")


# bot.py (—Ñ—Ä–∞–≥–º–µ–Ω—Ç /topics –∫–æ–º–∞–Ω–¥–∞)

@dp.message(Command("topics"))
async def topics_cmd(message: types.Message):
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /topics –ø–æ–ª—É—á–µ–Ω–∞. –ë–æ—Ç –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É.")
    msg = await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é Telegram-–∫–∞–Ω–∞–ª—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏...")

    try:
        reader = NewsReader()
        await reader.init()
        logger.info("ü§ñ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ TelegramClient.")

        sources_obj = SourceList()
        telegram_channels = sources_obj.get_telegram_channels()
        logger.info(f"üì° –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(telegram_channels)} Telegram-–∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

        validator = Validator(reader.client)
        working_tg, _ = await validator.validate_telegram_channels(telegram_channels)

        all_news = []
        for channel in working_tg:
            messages = await reader.telegram_reader(channel, limit=30, days=1)
            logger.info(f"‚úÖ –°—á–∏—Ç–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ @{channel}")
            all_news.extend(messages)

        if not all_news:
            await msg.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏.")
            return

        top_topics = extract_topics(all_news)
        top_topics = top_topics[:10]  # —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10

        if not top_topics:
            await msg.edit_text("üòï –¢–µ–º—ã –Ω–µ –±—ã–ª–∏ –≤—ã–¥–µ–ª–µ–Ω—ã.")
            return

        # –°–±–æ—Ä–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ –∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —Å—Å—ã–ª–æ–∫
        final_text = "\n\n".join(top_topics).strip()
        logger.info(f"üì® –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n{final_text}")

        if not final_text:
            await msg.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç.")
            return

        await msg.edit_text(final_text, parse_mode="HTML", disable_web_page_preview=False)


    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ Telegram-–∫–∞–Ω–∞–ª–æ–≤:")
        await msg.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")



@dp.message(Command("report"))
async def report_cmd(message: types.Message):
    await message.answer("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


@dp.message(F.text & ~F.text.startswith("/"))
async def debug_log(message: types.Message):
    logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")


async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_my_commands([
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="topics", description="–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã"),
            BotCommand(command="sentiment", description="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"),
            BotCommand(command="report", description="–°–æ–∑–¥–∞—Ç—å PDF-–æ—Ç—á—ë—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"),
        ])
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
